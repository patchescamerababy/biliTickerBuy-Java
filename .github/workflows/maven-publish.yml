name: Java Build and Release

on:
  push:
    branches: [ main ]
    paths:
      - 'src/main/java/**'
      - '.github/workflows/maven-publish.yml'
      - 'pom.xml'
  pull_request:
    paths:
      - 'src/main/java/**'
      - '.github/workflows/maven-publish.yml'
      - 'pom.xml'

permissions:
  contents: write
  packages: write

# —————————————————— 1️⃣  Rust native libraries —————————————————— #
jobs:
  rust-build:
    name: Rust (${{ matrix.label }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # ---------- Linux ----------
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            label: linux-x86_64
            out_name: libbili_ticket_gt_java.so
          # ---------- Windows ----------
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            label: win-x86_64
            out_name: bili_ticket_gt_java.dll
          # ---------- macOS ----------
          - os: macos-latest
            target: x86_64-apple-darwin
            label: macos-x86_64
            out_name: libbili_ticket_gt_java.dylib
          - os: macos-14
            target: aarch64-apple-darwin
            label: macos-aarch64
            out_name: libbili_ticket_gt_java.dylib

    steps:
    - uses: actions/checkout@v4

    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true

    - name: Clone biliTicker_gt_java
      run: git clone --depth 1 https://github.com/patchescamerababy/biliTicker_gt_java.git

    - name: Build native lib
      run: |
        rustup target add ${{ matrix.target }}
        cd biliTicker_gt_java
        cargo build --release --target ${{ matrix.target }}

    - name: Upload native artifact
      uses: actions/upload-artifact@v4
      with:
        name: native-${{ matrix.label }}
        path: biliTicker_gt_java/target/${{ matrix.target }}/release/${{ matrix.out_name }}
        retention-days: 5

# —————————————————— 2️⃣  Maven (single Ubuntu build) —————————————————— #
  java-build:
    name: Maven package (with all native libs)
    needs: rust-build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    # 下载所有 native-XXX
    - name: Download native libs
      uses: actions/download-artifact@v4

    # 拷贝到 resources/native/…
    - name: Copy native libs into resources
      run: |
        set -e
        declare -A MAP=( \
          ["native-win-x86_64"]="win/x86_64/bili_ticket_gt_java.dll" \
          ["native-linux-x86_64"]="linux/x86_64/libbili_ticket_gt_java.so" \
          ["native-macos-x86_64"]="macos/x86_64/libbili_ticket_gt_java.dylib" \
          ["native-macos-aarch64"]="macos/aarch64/libbili_ticket_gt_java.dylib" )
        for dir in "${!MAP[@]}"; do
          src=$(find "$dir" -type f)
          dst="src/main/resources/native/${MAP[$dir]}"
          mkdir -p "$(dirname "$dst")"
          cp "$src" "$dst"
        done
        echo ">>> Copied native libs:"
        find src/main/resources/native -type f

    # GraalVM & Maven
    - name: Setup GraalVM
      uses: graalvm/setup-graalvm@v1
      with:
        java-version: '21'
        distribution: 'graalvm'
        cache: 'maven'
        native-image-job-reports: 'true'
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Build with Maven
      run: mvn -B clean package -Dmaven.test.skip=true

    # 上传唯一的 JAR
    - name: Upload JAR Artifact
      uses: actions/upload-artifact@v4
      with:
        name: biliTickerBuy-${{ github.sha }}
        path: |
          target/*-jar-with-dependencies.jar
          target/*-all.jar
          target/*.jar
          "!target/original-*.jar"
        retention-days: 5
        if-no-files-found: error

# —————————————————— 3️⃣  Release —————————————————— #
  release:
    name: Publish Release
    needs: java-build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # ① 生成日期字符串（UTC，可按需改时区）
      - name: Gen date
        id: date
        run: echo "value=$(date +'%Y%m%d')" >> "$GITHUB_OUTPUT"

      # ② 下载 JAR 产物
      - name: Download JAR
        uses: actions/download-artifact@v4
        with:
          path: release

      # （可选）移除 original-*.jar，只保留要发布的
      - name: Filter JARs
        run: |
          find release -type f -name 'original-*.jar' -delete
          echo "Assets:"
          find release -type f -name '*.jar'

      # ③ 创建 Release，直接上传 JAR
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.date.outputs.value }}
          name: Release ${{ steps.date.outputs.value }}
          files: release/**/*.jar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


