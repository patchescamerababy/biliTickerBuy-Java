name: Build and Release

on:
  push:
    branches: [ "main" ]
    paths:
      - 'src/**'
      - 'pom.xml'
      - '.github/workflows/graalvm.yml'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'src/**'
      - 'pom.xml'
      - '.github/workflows/graalvm.yml'

permissions:
  contents: write
  packages: write

env:
  CARGO_TERM_COLOR: always

jobs:
  java-build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: amd64
            label: linux-amd64
            static: false
          - os: ubuntu-latest
            arch: arm64
            label: linux-arm64
            static: false
          - os: windows-latest
            arch: amd64
            label: windows-amd64
            static: false
          - os: macos-latest
            arch: amd64
            label: macos-amd64
            static: false
          - os: macos-latest
            arch: arm64
            label: macos-arm64
            static: false

    steps:
      # 1️⃣  拉取代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2️⃣  安装 GraalVM (JDK 21)
      - name: Setup GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          distribution: 'graalvm'
          architecture: ${{ matrix.arch }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          native-image-job-reports: 'true'

      # 3️⃣  Maven 构建（生成可执行 JAR + fat-jar）
      - name: Build with Maven
        run: mvn -B clean package

      # 4️⃣  预创建 Native Image 目录并复制 fat-jar → app.jar
      #      a) 选出首个 *-jar-with-dependencies.jar
      #      b) 统一命名为 app.jar，供后续三平台复用
      - name: Prepare Native Build Directory (all OSes)
        shell: bash
        run: |
          mkdir -p target/native-image
          FAT_JAR=$(ls target/*-jar-with-dependencies.jar | head -n1)
          if [[ -z "$FAT_JAR" ]]; then
            echo "::error::No fat-jar found."; exit 1
          fi
          cp "$FAT_JAR" target/native-image/app.jar
          ls -lh target/native-image

      # 5️⃣  Windows 原生镜像
      - name: Build Native Image (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          Copy-Item -Path config -Destination target/native-image -Recurse -Force
          Push-Location target/native-image
          native-image.cmd `
            -H:+AllowDeprecatedBuilderClassesOnImageClasspath `
            --initialize-at-run-time `
            -H:+UnlockExperimentalVMOptions `
            -H:-CheckToolchain `
            --no-fallback `
            --enable-https --enable-http `
            -H:+JNI `
            -H:ResourceConfigurationFiles=config/resource-config.json `
            -H:ReflectionConfigurationFiles=config/reflect-config.json `
            -H:JNIConfigurationFiles=config/jni-config.json `
            -H:DynamicProxyConfigurationFiles=config/proxy-config.json `
            -H:SerializationConfigurationFiles=config/serialization-config.json `
            -H:+AddAllCharsets -H:+IncludeAllLocales `
            -jar app.jar `
            -H:Name=biliTickerBuy-${{ matrix.label }} `
            ${{ matrix.static && '--static' || '' }}
          Pop-Location

      # 6️⃣  Linux 原生镜像
      - name: Build Native Image (Linux)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          cp -r config target/native-image/
          pushd target/native-image
          native-image \
            -H:+AllowDeprecatedBuilderClassesOnImageClasspath \
            --initialize-at-run-time \
            -H:+UnlockExperimentalVMOptions \
            -H:-CheckToolchain \
            --no-fallback \
            --enable-https --enable-http \
            -H:+JNI \
            -H:ResourceConfigurationFiles=config/resource-config.json \
            -H:ReflectionConfigurationFiles=config/reflect-config.json \
            -H:JNIConfigurationFiles=config/jni-config.json \
            -H:DynamicProxyConfigurationFiles=config/proxy-config.json \
            -H:SerializationConfigurationFiles=config/serialization-config.json \
            -H:+AddAllCharsets -H:+IncludeAllLocales \
            --gc=G1 \
            -jar app.jar \
            -H:Name=biliTickerBuy-${{ matrix.label }} \
            ${{ matrix.static && '--static' || '' }}
          popd

      # 7️⃣  macOS 原生镜像
      - name: Build Native Image (macOS)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          cp -r config target/native-image/
          pushd target/native-image
          native-image \
            -H:+AllowDeprecatedBuilderClassesOnImageClasspath \
            --initialize-at-run-time \
            -H:+UnlockExperimentalVMOptions \
            -H:-CheckToolchain \
            --no-fallback \
            --enable-https --enable-http \
            -H:+JNI \
            -H:ResourceConfigurationFiles=config/resource-config.json \
            -H:ReflectionConfigurationFiles=config/reflect-config.json \
            -H:JNIConfigurationFiles=config/jni-config.json \
            -H:DynamicProxyConfigurationFiles=config/proxy-config.json \
            -H:SerializationConfigurationFiles=config/serialization-config.json \
            -H:+AddAllCharsets -H:+IncludeAllLocales \
            -jar app.jar \
            -H:Name=biliTickerBuy-${{ matrix.label }} \
            ${{ matrix.static && '--static' || '' }}
          popd

      # 8️⃣  上传 JAR（只在 ubuntu-amd64 上执行一次）
      - name: Upload JAR Artifacts
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'amd64'
        uses: actions/upload-artifact@v4
        with:
          name: jar-files
          path: |
            target/*-jar-with-dependencies.jar
            target/*-all.jar
            target/*.jar
            "!target/original-*.jar"
          retention-days: 5

      # 9️⃣  上传平台原生二进制
      - name: Upload Native Binaries
        uses: actions/upload-artifact@v4
        with:
          name: biliTickerBuy-${{ matrix.label }}
          path: target/native-image/biliTickerBuy-${{ matrix.label }}${{ matrix.os == 'windows-latest' && '.exe' || '' }}
          retention-days: 5

  # ---------- 发布阶段 ----------
  release:
    needs: java-build
    runs-on: ubuntu-latest
    steps:
      # 1️⃣ 下载全部产物到本地 artifacts/*
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      # 2️⃣ 每个产物目录各打一个 zip（方便 Release 附件）
      - name: Zip individual build artifacts
        run: |
          cd artifacts
          for dir in */ ; do
            zip -r "../${dir%/}.zip" "$dir"
          done

      # 3️⃣ 生成日期（YYYY.MM.DD）给 tag / Release
      - name: Set up date env
        run: echo "DATE=$(date +'%Y.%m.%d')" >> $GITHUB_ENV

      # 4️⃣ 创建 GitHub Release 并上传全部 zip
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.DATE }}
          name: Release v${{ env.DATE }}
          files: '*.zip'
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
