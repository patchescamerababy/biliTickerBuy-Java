# name: Build and Release (Liberica NIK + JavaFX)

# on:
#   push:
#     branches: ["main"]
#     paths: ["src/**", "pom.xml", ".github/workflows/graalvm.yml"]
#   pull_request:
#     branches: ["main"]
#     paths: ["src/**", "pom.xml", ".github/workflows/graalvm.yml"]

# permissions:
#   contents: write
#   packages: write

# env:
#   CARGO_TERM_COLOR: always

# jobs:
#   java-build:
#     runs-on: ${{ matrix.os }}
#     strategy:
#       matrix:
#         include:
#           # ---------- Linux ----------
#           - os: ubuntu-latest
#             arch: amd64
#             label: linux-amd64
#             static: false
#           - os: ubuntu-latest
#             arch: arm64
#             label: linux-arm64
#             static: false
#           # ---------- Windows ----------
#           - os: windows-latest
#             arch: amd64
#             label: windows-amd64
#             static: true
#           # ---------- macOS ----------
#           - os: macos-latest
#             arch: amd64
#             label: macos-amd64
#             static: false
#           - os: macos-latest
#             arch: arm64
#             label: macos-arm64
#             static: false

#     steps:
#     # 1️⃣  Checkout -----------------------------------------------------------
#     - name: Checkout repository
#       uses: actions/checkout@v4

#     # 2️⃣  Linux：安装 JavaFX 图形依赖 ----------------------------------------
#     - name: Install Linux desktop libraries
#       if: matrix.os == 'ubuntu-latest'
#       run: |
#         sudo apt-get update
#         sudo apt-get install -y \
#           build-essential pkg-config \
#           libx11-dev libxtst-dev libxext-dev libxi-dev libxrandr-dev libxinerama-dev \
#           libxcursor-dev libxrender-dev libfontconfig1-dev libfreetype6-dev \
#           libgtk-3-dev libglib2.0-dev libgdk-pixbuf2.0-dev libcairo2-dev \
#           libpango1.0-dev libharfbuzz-dev libatk1.0-dev \
#           libgl1-mesa-dev freeglut3-dev

#     # 3️⃣  macOS & Linux & Windows：设置 BellSoft NIK -------------------------
#     - name: Setup Liberica NIK (macOS / Linux)
#       if: matrix.os != 'windows-latest'
#       uses: graalvm/setup-graalvm@v1
#       with:
#         distribution: liberica                   # NIK 支持 setup-graalvm :contentReference[oaicite:3]{index=3}
#         java-package: jdk+fx                     # 自带 JavaFX 模块
#         java-version: 21
#         architecture: ${{ matrix.arch }}
#         components: native-image
#         native-image-job-reports: true
#         github-token: ${{ secrets.GITHUB_TOKEN }}

#     # 3️⃣-Win ⼿动下载 Liberica NIK ZIP ----------------------------------------
#     - name: Download Liberica NIK (Windows)
#       if: matrix.os == 'windows-latest'
#       shell: pwsh
#       run: |
#         $url  = 'https://download.bell-sw.com/vm/23.1.7/' +
#                 'bellsoft-liberica-vm-full-openjdk21.0.7+9-23.1.7+1-windows-amd64.zip'
#         $zip  = "$env:RUNNER_TEMP\nik.zip"
#         Invoke-WebRequest $url -OutFile $zip   # 官方下载页 :contentReference[oaicite:4]{index=4}
#         Expand-Archive $zip -DestinationPath $env:RUNNER_TEMP
#         $nik  = "$env:RUNNER_TEMP\bellsoft-liberica-vm-full-openjdk21-23.1.7"
#         echo "GRAALVM_HOME=$nik" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8
#         echo "$nik\bin"           | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8

#     # 4️⃣  Maven 构建 ---------------------------------------------------------
#     - name: Build with Maven
#       run: mvn -B clean package

#     # 5️⃣  准备 fat-jar → app.jar --------------------------------------------
#     - name: Prepare Native Build Directory
#       shell: bash
#       run: |
#         set -e
#         mkdir -p target/native-image
#         FAT=$(find target -maxdepth 1 -type f -name "*.jar" ! -name "original-*.jar" | head -n1)
#         cp "$FAT" target/native-image/app.jar
#         echo "fat-jar = $FAT"

#     # 6️⃣  Windows native-image ----------------------------------------------
#     - name: Build Native Image (Windows)
#       if: matrix.os == 'windows-latest'
#       shell: pwsh
#       run: |
#         Copy-Item -Path config -Destination target/native-image -Recurse -Force
#         Push-Location target/native-image
#         $vc = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
#         if (-not (Test-Path $vc)) {
#           $vc = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvars64.bat"
#         }
#         cmd /c "`"$vc`" && native-image.cmd --static --enable-https --enable-http --no-fallback -H:ConfigurationFileDirectories=./config -jar app.jar -H:Name=biliTickerBuy-${{ matrix.label }}"
#         Pop-Location

#     # 7️⃣  Linux native-image --------------------------------------------------
#     - name: Build Native Image (Linux)
#       if: matrix.os == 'ubuntu-latest'
#       shell: bash
#       run: |
#         cp -r config target/native-image/
#         pushd target/native-image
#         native-image \
#           --enable-https --enable-http \
#           --no-fallback \
#           -H:+JNI -H:ConfigurationFileDirectories=./config \
#           --initialize-at-run-time \
#           -jar app.jar \
#           -H:Name=biliTickerBuy-${{ matrix.label }}
#         popd

#     # 8️⃣  macOS native-image --------------------------------------------------
#     - name: Build Native Image (macOS)
#       if: matrix.os == 'macos-latest'
#       shell: bash
#       run: |
#         cp -r config target/native-image/
#         pushd target/native-image
#         native-image \
#           --enable-https --enable-http \
#           --no-fallback \
#           -H:+JNI -H:ConfigurationFileDirectories=./config \
#           --initialize-at-run-time \
#           -jar app.jar \
#           -H:Name=biliTickerBuy-${{ matrix.label }}
#         popd

#     # 9️⃣  打包可执行文件 + 动态库 -------------------------------------------
#     - name: Stage Native Package
#       shell: bash
#       run: |
#         OUT=dist/${{ matrix.label }}
#         mkdir -p "$OUT"
#         cp -r target/native-image/* "$OUT"/
#         ls -R "$OUT"

#     # 🔟  上传平台产物 --------------------------------------------------------
#     - name: Upload Native Artifacts
#       uses: actions/upload-artifact@v4
#       with:
#         name: biliTickerBuy-${{ matrix.label }}
#         path: dist/${{ matrix.label }}
#         retention-days: 5

#     # 1️⃣1️⃣  仅 linux-amd64 上传 fat-jar -------------------------------------
#     - name: Upload JAR Artifacts
#       if: matrix.os == 'ubuntu-latest' && matrix.arch == 'amd64'
#       uses: actions/upload-artifact@v4
#       with:
#         name: jar-files
#         path: |
#           target/*.jar
#           !target/original-*.jar
#         retention-days: 5

# # ------------------------------ Release --------------------------------------
#   release:
#     needs: java-build
#     runs-on: ubuntu-latest
#     steps:
#       - name: Download build artifacts
#         uses: actions/download-artifact@v4
#         with:
#           path: artifacts

#       - name: Zip each artifact directory
#         shell: bash
#         run: |
#           cd artifacts
#           for dir in */ ; do
#             zip -r "../${dir%/}.zip" "$dir"
#           done

#       - name: Set up date
#         run: echo "DATE=$(date +'%Y.%m.%d')" >> $GITHUB_ENV

#       - name: Create GitHub Release
#         uses: softprops/action-gh-release@v1
#         with:
#           tag_name: v${{ env.DATE }}
#           name: Release v${{ env.DATE }}
#           files: '*.zip'
#           draft: false
#           prerelease: false
#           token: ${{ secrets.GITHUB_TOKEN }}
