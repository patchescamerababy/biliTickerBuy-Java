name: Build and Release

on:
  push:
    branches: ["main"]
    paths: ["src/**", "pom.xml", ".github/workflows/graalvm.yml"]
  pull_request:
    branches: ["main"]
    paths: ["src/**", "pom.xml", ".github/workflows/graalvm.yml"]

permissions:
  contents: write
  packages: write

env:
  CARGO_TERM_COLOR: always

jobs:
  java-build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest   # linux-amd64
            arch: amd64
            label: linux-amd64
          - os: ubuntu-latest   # linux-arm64
            arch: arm64
            label: linux-arm64
          - os: windows-latest  # windows-amd64
            arch: amd64
            label: windows-amd64
          - os: macos-latest    # mac-amd64
            arch: amd64
            label: macos-amd64
          - os: macos-latest    # mac-arm64
            arch: arm64
            label: macos-arm64

    steps:
    # ── 1. 拉代码 ───────────────────────────────────────────────
    - uses: actions/checkout@v4

    # ── 2. 安装 GraalVM 21 ─────────────────────────────────────
    - uses: graalvm/setup-graalvm@v1
      with:
        java-version: '21'
        distribution: 'graalvm'
        architecture: ${{ matrix.arch }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
        native-image-job-reports: 'true'

    # ── 3. Maven 构建（fat-jar 在 target/ 下）──────────────────
    - name: Build with Maven
      run: mvn -B clean package

    # ── 4. 复制 fat-jar → app.jar（排除 original-*.jar）──────────
    - name: Prepare Native Build Directory
      shell: bash
      run: |
        set -e
        mkdir -p target/native-image
        FAT=$(find target -maxdepth 1 -type f -name "*.jar" ! -name "original-*.jar" | head -n1)
        [[ -z "$FAT" ]] && { echo "::error::fat-jar not found"; exit 1; }
        cp "$FAT" target/native-image/app.jar
        echo "Using fat-jar: $FAT"

    # ── 5-7. 各平台 native-image（命令同之前，略）──────────────
    # ……（保持你之前的 Windows / Linux / macOS native-image 步骤）……

    # ── 8. 打包 exe + 动态库 ───────────────────────────────────
    - name: Stage native package
      shell: bash
      run: |
        set -e
        OUT=dist/${{ matrix.label }}
        mkdir -p "$OUT"
        # 直接拷贝整个 native-image 目录，保证 dll/so/dylib 全在同一处
        cp -r target/native-image/* "$OUT"/
        ls -R "$OUT"

    # ── 9. 上传平台产物（含动态库）──────────────────────────────
    - name: Upload native artifacts
      uses: actions/upload-artifact@v4
      with:
        name: biliTickerBuy-${{ matrix.label }}
        path: dist/${{ matrix.label }}
        retention-days: 5

    # ── 10. 仅 linux-amd64 上传 fat-jar ────────────────────────
    - name: Upload JAR
      if: matrix.os == 'ubuntu-latest' && matrix.arch == 'amd64'
      uses: actions/upload-artifact@v4
      with:
        name: jar-files
        path: |
          target/*.jar
          !target/original-*.jar
        retention-days: 5

# ────────────────────────── Release 阶段 ──────────────────────────
  release:
    needs: java-build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Zip each artifact dir
        shell: bash
        run: |
          cd artifacts
          for dir in */ ; do
            zip -r "../${dir%/}.zip" "$dir"
          done

      - name: Set tag date
        run: echo "DATE=$(date +'%Y.%m.%d')" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.DATE }}
          name: Release v${{ env.DATE }}
          files: '*.zip'
          token: ${{ secrets.GITHUB_TOKEN }}
