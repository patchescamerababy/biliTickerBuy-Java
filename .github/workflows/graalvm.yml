name: Build and Release

on:
  push:
    branches: ["main"]
    paths: ["src/**", "pom.xml", ".github/workflows/graalvm.yml"]
  pull_request:
    branches: ["main"]
    paths: ["src/**", "pom.xml", ".github/workflows/graalvm.yml"]

permissions:
  contents: write
  packages: write

env:
  CARGO_TERM_COLOR: always

jobs:
  java-build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # ───────── Linux ─────────
          - os: ubuntu-latest
            arch: amd64
            label: linux-amd64
          - os: ubuntu-latest
            arch: arm64
            label: linux-arm64
          # ───────── Windows ───────
          - os: windows-latest
            arch: amd64
            label: windows-amd64
          # ───────── macOS ─────────
          - os: macos-latest
            arch: amd64
            label: macos-amd64
          - os: macos-latest
            arch: arm64
            label: macos-arm64

    steps:
    # 1️⃣  克隆仓库 -----------------------------------------------------------
    - name: Checkout repository
      uses: actions/checkout@v4

    # 2️⃣  安装 GraalVM -------------------------------------------------------
    - name: Setup GraalVM
      uses: graalvm/setup-graalvm@v1
      with:
        java-version: '21'
        distribution: 'graalvm'
        architecture: ${{ matrix.arch }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
        native-image-job-reports: 'true'

    # 3️⃣  Maven 构建（生成 fat-jar）------------------------------------------
    - name: Build with Maven
      run: mvn -B clean package

    # 4️⃣  复制 fat-jar → app.jar（排除 original-*.jar）-----------------------
    - name: Prepare Native Build Directory
      shell: bash
      run: |
        set -e
        mkdir -p target/native-image
        FAT=$(find target -maxdepth 1 -type f -name "*.jar" ! -name "original-*.jar" | head -n1)
        [[ -z "$FAT" ]] && { echo "::error::Fat JAR not found"; exit 1; }
        cp "$FAT" target/native-image/app.jar
        echo "Using fat-jar: $FAT"
        ls -lh target/native-image

    # 5️⃣  Windows native-image ----------------------------------------------
    - name: Build Native Image (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        Copy-Item -Path config -Destination target/native-image -Recurse -Force
        Push-Location target/native-image
        native-image.cmd `
          -H:+AllowDeprecatedBuilderClassesOnImageClasspath `
          --initialize-at-run-time `
          -H:+UnlockExperimentalVMOptions `
          -H:-CheckToolchain `
          --no-fallback `
          --enable-https --enable-http `
          -H:+JNI `
          -H:ResourceConfigurationFiles=config/resource-config.json `
          -H:ReflectionConfigurationFiles=config/reflect-config.json `
          -H:JNIConfigurationFiles=config/jni-config.json `
          -H:DynamicProxyConfigurationFiles=config/proxy-config.json `
          -H:SerializationConfigurationFiles=config/serialization-config.json `
          -H:+AddAllCharsets -H:+IncludeAllLocales `
          -jar app.jar `
          -H:Name=biliTickerBuy-${{ matrix.label }}
        Pop-Location

    # 6️⃣  Linux native-image -------------------------------------------------
    - name: Build Native Image (Linux)
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        cp -r config target/native-image/
        pushd target/native-image
        native-image \
          -H:+AllowDeprecatedBuilderClassesOnImageClasspath \
          --initialize-at-run-time \
          -H:+UnlockExperimentalVMOptions \
          -H:-CheckToolchain \
          --no-fallback \
          --enable-https --enable-http \
          -H:+JNI \
          -H:ResourceConfigurationFiles=config/resource-config.json \
          -H:ReflectionConfigurationFiles=config/reflect-config.json \
          -H:JNIConfigurationFiles=config/jni-config.json \
          -H:DynamicProxyConfigurationFiles=config/proxy-config.json \
          -H:SerializationConfigurationFiles=config/serialization-config.json \
          -H:+AddAllCharsets -H:+IncludeAllLocales \
          --gc=G1 \
          -jar app.jar \
          -H:Name=biliTickerBuy-${{ matrix.label }}
        popd

    # 7️⃣  macOS native-image -------------------------------------------------
    - name: Build Native Image (macOS)
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        cp -r config target/native-image/
        pushd target/native-image
        native-image \
          -H:+AllowDeprecatedBuilderClassesOnImageClasspath \
          --initialize-at-run-time \
          -H:+UnlockExperimentalVMOptions \
          -H:-CheckToolchain \
          --no-fallback \
          --enable-https --enable-http \
          -H:+JNI \
          -H:ResourceConfigurationFiles=config/resource-config.json \
          -H:ReflectionConfigurationFiles=config/reflect-config.json \
          -H:JNIConfigurationFiles=config/jni-config.json \
          -H:DynamicProxyConfigurationFiles=config/proxy-config.json \
          -H:SerializationConfigurationFiles=config/serialization-config.json \
          -H:+AddAllCharsets -H:+IncludeAllLocales \
          -jar app.jar \
          -H:Name=biliTickerBuy-${{ matrix.label }}
        popd

    # 8️⃣  打包可执行文件 + 动态库 -------------------------------------------
    - name: Stage Native Package
      shell: bash
      run: |
        set -e
        OUT=dist/${{ matrix.label }}
        mkdir -p "$OUT"
        # 将 target/native-image 内全部内容打包（exe/elf + *.dll/*.so/*.dylib + app.jar + config）
        cp -r target/native-image/* "$OUT"/
        ls -R "$OUT"

    # 9️⃣  上传平台产物 -------------------------------------------------------
    - name: Upload Native Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: biliTickerBuy-${{ matrix.label }}
        path: dist/${{ matrix.label }}
        retention-days: 5

    # 🔟  仅 ubuntu-amd64 上传 fat-jar ---------------------------------------
    - name: Upload JAR Artifacts
      if: matrix.os == 'ubuntu-latest' && matrix.arch == 'amd64'
      uses: actions/upload-artifact@v4
      with:
        name: jar-files
        path: |
          target/*.jar
          !target/original-*.jar
        retention-days: 5

# ────────────────────────── 发布阶段 ──────────────────────────────
  release:
    needs: java-build
    runs-on: ubuntu-latest
    steps:
      # 1. 下载所有构建产物
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      # 2. 单独 zip 每个目录
      - name: Zip Each Artifact Directory
        shell: bash
        run: |
          cd artifacts
          for dir in */ ; do
            zip -r "../${dir%/}.zip" "$dir"
          done

      # 3. 生成日期 tag
      - name: Set Up Date
        run: echo "DATE=$(date +'%Y.%m.%d')" >> $GITHUB_ENV

      # 4. 创建 GitHub Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.DATE }}
          name: Release v${{ env.DATE }}
          files: '*.zip'
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
