name: Build and Release (Liberica NIK + JavaFX)

on:
  push:
    branches: ["main"]
    paths: ["src/**", "pom.xml", ".github/workflows/graalvm.yml"]
  pull_request:
    branches: ["main"]
    paths: ["src/**", "pom.xml", ".github/workflows/graalvm.yml"]

permissions:
  contents: write
  packages: write

env:
  CARGO_TERM_COLOR: always

jobs:
  java-build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # -------- Linux --------
          - os: ubuntu-latest
            arch: amd64
            label: linux-amd64
            static: false          # ⬅ Linux 无需 --static，避免 .a 不全
          - os: ubuntu-latest
            arch: arm64
            label: linux-arm64
            static: false
          # -------- Windows ------
          - os: windows-latest
            arch: amd64
            label: windows-amd64
            static: false
          # -------- macOS --------
          - os: macos-latest
            arch: amd64
            label: macos-amd64
            static: false
          - os: macos-latest
            arch: arm64
            label: macos-arm64
            static: false

    steps:
    # 1️⃣  Checkout -----------------------------------------------------------
    - uses: actions/checkout@v4

    # 2️⃣  ⬅ **仅 Linux**：图形栈依赖 -----------------------------------------
    - name: Install Linux desktop libraries
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential pkg-config \
          libx11-dev libxtst-dev libxext-dev libxi-dev libxrandr-dev libxinerama-dev \
          libxcursor-dev libxrender-dev libfontconfig1-dev libfreetype6-dev \
          libgtk-3-dev libglib2.0-dev libgdk-pixbuf2.0-dev libcairo2-dev \
          libpango1.0-dev libharfbuzz-dev libatk1.0-dev libgmodule-2.0-dev \
          libgl1-mesa-dev freeglut3-dev

    # 3️⃣  Liberica NIK + FX ---------------------------------------------------
    - name: Setup Liberica NIK (with JavaFX)
      uses: graalvm/setup-graalvm@v1
      with:
        distribution: 'liberica'
        java-package: 'jdk+fx'      # 带 JavaFX
        java-version: '21'
        architecture: ${{ matrix.arch }}
        components: 'native-image'
        native-image-job-reports: 'true'
        github-token: ${{ secrets.GITHUB_TOKEN }}

    # 4️⃣  Maven build ---------------------------------------------------------
    - name: Build with Maven
      run: mvn -B clean package

    # 5️⃣  Copy fat-jar --------------------------------------------------------
    - name: Prepare Native Build Dir
      shell: bash
      run: |
        set -e
        mkdir -p target/native-image
        FAT=$(find target -maxdepth 1 -type f -name "*.jar" ! -name "original-*.jar" | head -n1)
        cp "$FAT" target/native-image/app.jar
        echo "Using fat-jar $FAT"

    # 6️⃣  native-image（Windows / Linux / macOS）------------------------------
    # -- Windows
    - name: Build Native Image (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        Copy-Item -Path config -Destination target/native-image -Recurse -Force
        Push-Location target/native-image
        native-image.cmd `
          --initialize-at-run-time `
          -H:+UnlockExperimentalVMOptions -H:-CheckToolchain `
          --no-fallback --enable-https --enable-http `
          -H:+JNI -H:ConfigurationFileDirectories=./config `
          -H:+AddAllCharsets -H:+IncludeAllLocales `
          -jar app.jar `
          -H:Name=biliTickerBuy-${{ matrix.label }} `
          ${{ matrix.static && '--static' || '' }}
        Pop-Location

    # -- Linux
    - name: Build Native Image (Linux)
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        cp -r config target/native-image/
        pushd target/native-image
        native-image \
          --initialize-at-run-time \
          -H:+UnlockExperimentalVMOptions -H:-CheckToolchain \
          --no-fallback --enable-https --enable-http \
          -H:+JNI -H:ConfigurationFileDirectories=./config \
          --gc=G1 \
          -jar app.jar \
          -H:Name=biliTickerBuy-${{ matrix.label }}
        popd

    # -- macOS
    - name: Build Native Image (macOS)
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        cp -r config target/native-image/
        pushd target/native-image
        native-image \
          --initialize-at-run-time \
          -H:+UnlockExperimentalVMOptions -H:-CheckToolchain \
          --no-fallback --enable-https --enable-http \
          -H:+JNI -H:ConfigurationFileDirectories=./config \
          -jar app.jar \
          -H:Name=biliTickerBuy-${{ matrix.label }}
        popd

    # 7️⃣  Package + upload (保持不变) ----------------------------------------

    # …（后续 Stage - dist/ / Upload / Release 步骤保持和之前相同）…
